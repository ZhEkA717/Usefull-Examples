"use strict";

// // Элементы массива могут иметь сложный тип ///////////////////////////////////////////////////////////////
// var myBoard=[
//     ['x','x','x','x','x','x','x','x'],
//     ['x','x','x','x','x','x','x','x'],
//     ['x','x','x','x','x','x','x','x'],
//     ['x','x','x','x','x','x','x','x'],
//     ['x','x','x','x','x','x','x','x'],
//     ['x','x','x','x','x','x','x','x'],
//     ['x','x','x','x','x','x','x','x'],
//     ['x','x','x','x','x','x','x','x'],
// ];

// function showBoard(board) {
//     console.log(' ---------------');
//     for ( var row=0; row<board.length; row++ ) {
//         var rowStr=(row+1)+") ";
//         for ( var col=0; col<board[row].length; col++ )
//             rowStr+=board[row][col]+" ";
//         console.log(rowStr);
//     }
//     console.log(' ---------------');
// }

// showBoard(myBoard);

// myBoard[1][3]='Q';

// showBoard(myBoard);
/////////////////////////////////////////////////////////////////////////////////////////////


// // Хэш как память (как замопнить что-то,что уже случалось)////////////////////////////////////
// var values=[55,77,55,66,77,66,];
// var used={}; // ключ хэша - число, которое уже встречалось
// for ( var i=0; i<values.length; i++ ) {
//     var value=values[i]; // очередное значение
//     if ( value in used ) // встречалось ли оно?
//         continue; // если да - всё, берём следующее
//     used[value]=true; // если нет - запоминаем, что это значение уже встречалось
//     console.log(value); // выводим его в консоль
// }
// /////////////////////////////////////////////////////////////////////////////////////////////


// //Хэш как набор опций (аргументы функции)
// function message(txt,options) {
//     options=options || {};
//     var header=options.header || 'ВНИМАНИЕ!';
//     var count=options.count || 1;

//     console.log( header );
//     for ( var i=1; i<=count; i++ )
//         console.log( i+" "+txt );
// }

// message( 'Доброе утро!', { header:'ИНФОРМАЦИЯ', count:3 } );
// message( 'Добрый день!!', { header:'ИНФОРМАЦИЯ' } );
// message( 'Добрый вечер!', { count:2 } );
// message( 'Здравствуйте!', { } );
// message( 'До свидания!' );
// /////////////////////////////////////////////////////////////////////////////////////////////


// //Хэш как словарь (таблица перекодировки)/////////////////////////////////////////////////////
// function colorCode(colorName) {
//     var colors={ red:'#FF0000', green:'#00FF00', blue:'#0000FF', black:'#000000', white:'#FFFFFF' };
//     return colors[colorName];
// }

// console.log( colorCode('red') );
// console.log( colorCode('white') );
// /////////////////////////////////////////////////////////////////////////////////////////////


// //Хэш как счетчик /////////////////////////////////////////////////////////////////////////////
// var animals=[ 'собака', 'кошка', 'тушкан', 'собака', 'собака', 'тушкан' ];

// var count={}; // ключ - животное, значение - сколько раз оно встретилось
// for ( var i=0; i<animals.length; i++ ) {
//     var animal=animals[i];
//     if ( !(animal in count) )
//         count[animal]=0;
//     count[animal]++;
// }

// console.log( count );
// //////////////////////////////////////////////////////////////////////////////////////////////


// // Сравнение массивов и хэшэй/////////////////////////////////////////////////////////////////
// var a=[2,3,5];
// var a2=[2,3,5];
// console.log( a==a2 ); // сравниваются ссылки на массивы, а не элементы массивов

// var h={a:5,b:6};
// var h2={a:5,b:6};
// console.log( h==h2 ); // сравниваются ссылки на хэши, а не ключи/элементы хэшей

// var z=[ ];
// console.log( z==[ ] ); // [ ] - это литерал НОВОГО массива, только что созданного! ссылка
// console.log( [ ]==[ ] ); // на него не может быть равна чему-либо уже существующему в программе!

// var k={ };
// console.log( k=={ } ); // { } - это литерал НОВОГО хэша, только что созданного! ссылка
// console.log( { }=={ } ); // на него не может быть равна чему-либо уже существующему в программе!
// ////////////////////////////////////////////////////////////////////////////////////////////////////////


// //Для округления числа не к ближайшей единице, а например к ближайшей сотне или к ближайшей 
// //десятой доле, можно применять формулу:Math.round(n/m)*m
// //где n — округляемое число, а m — модуль округления, 
// //т.е. то число, на которое должно нацело делиться округляемое n (т.е. например 100 или 0.1).
// function roundMod(n,m) {
//     return Math.round(n/m)*m;
//   }

//   console.log( roundMod(16.2,10) );
// // ////////////////////////////////////////////////////////////////////////////////////////////////////////
